import streamlit as st
from docx import Document as DocxDocument
import io
import os
from dotenv import load_dotenv
import tiktoken
from langchain.chat_models import ChatOpenAI
from langchain.chains.summarize import load_summarize_chain
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain.prompts import load_prompt
from langchain.prompts import PromptTemplate
from langchain.chains import LLMChain, ConversationChain
from langchain.prompts.chat import (
    ChatPromptTemplate,
    SystemMessagePromptTemplate,
    HumanMessagePromptTemplate,
)

# Indl칝s milj칮variabler (secrets)
load_dotenv()

openai_api_key = os.getenv("OPENAI_API_KEY")

st.set_page_config(
    page_title="Slotsholmifikatoren",
    page_icon="游녦",
    layout="wide",
)

# Overskrift og hj칝lpetekst
st.title('游붚游댕 Slotsholmifikatoren')

introhjaelpetekst = '''I UFM skal alle forkl칝der f칮lge Slotsholmsmetoden. 
                    Brug det nedenst친ende v칝rkt칮j til at uploade et notat og f친 et udkast til forkl칝de. '''

st.markdown(introhjaelpetekst)


# Funktion til at konvertere Word til tekst
def docx_to_text(file):
    doc = DocxDocument(file)
    full_text = []
    for paragraph in doc.paragraphs:
        full_text.append(paragraph.text)
    return ' '.join(full_text)
    
result = []

def num_tokens_from_string(string: str, encoding_model: str) -> int:
    """Returns the number of tokens in a text string."""
    encoding = tiktoken.encoding_for_model(encoding_model)
    num_tokens = len(encoding.encode(string))
    return num_tokens


# Kald til OpenAI's API
def generate_summary(txt):
    # Instantier sprogmodel
    llm4k = ChatOpenAI(temperature=0, 
                model_name='gpt-3.5-turbo',
                openai_api_key=openai_api_key)
    
    # Lav rekursiv tekstsplit - summary of summaries
    text_splitter = RecursiveCharacterTextSplitter(chunk_size=1000, 
                                                chunk_overlap=100, 
                                                separators=[" ", ",", "\n"])
    docs = text_splitter.create_documents([txt])
    
    # Map-prompt til at lave pr칝limin칝re summaries
    map_prompt_template = load_prompt("prompts/map_prompt.json")
    
    # Kombiner prompt
    combine_prompt_template = load_prompt("prompts/combine_prompt.json")
    
    # Text summarization
    summary_chain = load_summarize_chain(llm=llm4k,
                                        chain_type='map_reduce', #'map_reduce'
                                        map_prompt=map_prompt_template,
                                        combine_prompt=combine_prompt_template,
                                        verbose=True,
                                        )
    # Returner referat af teksten
    return summary_chain.run({'input_documents': docs})

def generate_response(txt, formaal, input_text):

    txtLength = num_tokens_from_string(txt, "gpt-3.5-turbo")
    print('Antal tokens i resumeer: ', txtLength)

    if txtLength > 10000:
        try:
            docs = generate_summary(txt)
        except Exception as e:
            return(e.message, e.args)
    else:
        docs = txt

    # Instantier sprogmodel
    llm16k = ChatOpenAI(temperature=0, 
                 model_name='gpt-3.5-turbo-16k',
                 openai_api_key=openai_api_key)

    template = """Du er en hj칝lpsom assistent, der altid f칮lger Slotsholmmetoden."""
    system_message_prompt = SystemMessagePromptTemplate.from_template(template)

    human_template = """
    Du skal nu lave en kort opsummering af teksten nedenfor indkapslet i triple backquotes (```) ved hj칝lp af Slotsholmmetoden.
    If칮lge Slotsholmmetoden skal opsummeringen MAKSIMALT fylde 3 s칝tninger:
    - Den f칮rste s칝tning er kants칝tningen og skal besvare hvad tekstens 칝rinde er. Hvad er den konkrete anledning til at man henvender sig? Er et produkt klar til godkendelse? Skal vi reagere p친 noget, der er sket? Skal vi forholde os til en ny tanke, har vi produceret en ny analyse, eller har vi forfattet endnu en rutinem칝ssig statusrapport?  
    - Derefter f칮lger konteksts칝tningen. Konteksts칝tningen kvalificerer kants칝tningen med en vurdering af hvad er der p친 spil. Den fort칝ller i hvilket lys kants칝tningen skal ses. S칝tningen flager graden af business as usual, opm칝rksomhedsbehov eller drama.
    - Til sidst f칮lger konklusionss칝tningen, der beskriver hvad slutmodtageren skal med dokumentet: Skal slutmodtageren vide, beslutte eller handle? Skriveren har oplyst, at tekstens konklusion er som f칮lger: {formaal}
    Her f칮lger 3 eksempler p친 gode besvarelser p친 irrelevante tekster, der overholder kravene:
    - Der er behov for at styrelsen genovervejer sin tolkning af reglerne for udbetaling i landbrugsst칮tteordningen (BICES). Et nyligt afholdt m칮de med EU-Kommissionen har afd칝kket, at der er uoverensstemmelse mellem parternes forst친else af udbetalingsreglerne, hvorfor der inden for f친 dage vil komme bud p친 plan for videre forl칮b. Notatet er alene til orientering.
    - Dagsordenen til kvartalsm칮de med Rigspolitiets juridiske afdeling er klar. Programmet indeholder alene punkter af rutinem칝ssig karakter, herunder en orientering om jubil칝umsskriftet. Det skal besluttes, om dagsordenen kan godkendes.
    - Budgettet til hjemtagning af f칝rdigbehandlede patienter kan med fordel varigt reduceres med 1,2 mio. kr. Der er et mindreforbrug i forl칝ngelse af en r칝kke tiltag fra Sundhedsforvaltningen, som betyder, at f칝rdigbehandlede patienter venter f칝rre dage p친 hospitalerne. Det skal besluttes, om budget칝ndringen kan godkendes.
    Herunder f칮lger teksten:
    ```{text}````
    """
    human_message_prompt = HumanMessagePromptTemplate.from_template(human_template)
    
    chat_prompt = ChatPromptTemplate.from_messages(
        [system_message_prompt, human_message_prompt]
    )
    slotsholm_chain = LLMChain(llm=llm16k, prompt=chat_prompt, verbose=True)


    # Text summarization
    #kant_kontekst_konklusion = load_prompt("prompts/kant_kontekst_konklusion.json")

    return slotsholm_chain.run({'text': docs,
                                'formaal': input_text})




# Form-elementer og logik til upload af notat 

# V칝lg form친l med forkl칝det
formaal = st.radio("Skal modtageren efter endt l칝sning vide, beslutte eller handle? 游녢",
                    ('Vide', 'Beslutte', 'Handle'),
                    horizontal=True,
                    )

if formaal == 'Beslutte':
    input_text = st.text_input('Angiv kort hvad l칝seren skal beslutte')
elif formaal == 'Handle':
    input_text = st.text_input('Angiv kort hvad l칝seren skal g칮re')
elif formaal == 'Vide':
    input_text = 'Punktet er alene til orientering.'

# Fileuploader
uploaded_file = st.file_uploader("V칝lg notat", 
                                    type='docx',
                                    )
# Upload-knap
submitted = st.button('Generer forkl칝de', type='primary')

# Ved klik p친 knap
if submitted:
    if uploaded_file is not None:
        with st.spinner('Slotsholmificering in progress 游땙'):
            docx_file = io.BytesIO(uploaded_file.getbuffer())
            rawtext = docx_to_text(docx_file)
            response = generate_response(rawtext, formaal, input_text)
            result.append(response)

if len(result):
    st.header('Udkast til forkl칝de')
    st.info(result)

# Resultat